If I have multiple instances of an application open, each of thoes instances is a separate
process of the same program.

Every process can have multiple threads. Unlike threads, a process cannot directly read
and write another process's variables.

I can pass commain line arguments to processes I create with Popen(). To do so, I pass
a list as the sole argument to Popen(). The first element is the executable, the others
are the command line arguments to pass. In effect, this list will be the value of sys.argv
for the launched program.

Most GUI applications will accept a single argument for a file that the applications will
immediately open when they start.

I can launch a Python script from Python just like any other application. If the script
I'm launching needs command line arguments, add them to the list after the script's filename.
I chose to use the "run()" function in my code example because it waits for the subprocess to
finish. Otherwise, Popen() with time.sleep(1) gives time for the subprocess to run before closing
the program (there are better alternatives, like .wait(), for real-world programs, but for the
sake of this example, it works).

Double-clicking a .txt file on my computer will automatically launch the application associated
with the .txt file extension (like notepad, to read it). My computer has several of these file
extension associations set up already. Python can also open files this way with Popen().
Each operating system has a program that performs the equivalent of double-clicking a document
file to open it. On Windows, this is the "start" program. On macOS, this is the "open" program.
On Ubuntu Linux, this is the "see" program.
The "shell=True" keyword argument is needed only on Windows.